// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: catalog.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Catalog_GetBeers_FullMethodName        = "/api.Catalog/GetBeers"
	Catalog_GetBeer_FullMethodName         = "/api.Catalog/GetBeer"
	Catalog_CreateBeer_FullMethodName      = "/api.Catalog/CreateBeer"
	Catalog_UpdateBeer_FullMethodName      = "/api.Catalog/UpdateBeer"
	Catalog_DeleteBeer_FullMethodName      = "/api.Catalog/DeleteBeer"
	Catalog_SetFavorite_FullMethodName     = "/api.Catalog/SetFavorite"
	Catalog_GetFavorites_FullMethodName    = "/api.Catalog/GetFavorites"
	Catalog_DeleteFavorites_FullMethodName = "/api.Catalog/DeleteFavorites"
)

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	GetBeers(ctx context.Context, in *GetBeersRequest, opts ...grpc.CallOption) (*GetBeersResponse, error)
	GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error)
	CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*CreateBeerResponse, error)
	UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*UpdateBeerResponse, error)
	DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error)
	SetFavorite(ctx context.Context, in *SetFavoriteRequest, opts ...grpc.CallOption) (*SetFavoriteResponse, error)
	GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error)
	DeleteFavorites(ctx context.Context, in *DeleteFavoriteRequest, opts ...grpc.CallOption) (*DeleteFavoriteResponse, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetBeers(ctx context.Context, in *GetBeersRequest, opts ...grpc.CallOption) (*GetBeersResponse, error) {
	out := new(GetBeersResponse)
	err := c.cc.Invoke(ctx, Catalog_GetBeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetBeer(ctx context.Context, in *GetBeerRequest, opts ...grpc.CallOption) (*GetBeerResponse, error) {
	out := new(GetBeerResponse)
	err := c.cc.Invoke(ctx, Catalog_GetBeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*CreateBeerResponse, error) {
	out := new(CreateBeerResponse)
	err := c.cc.Invoke(ctx, Catalog_CreateBeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*UpdateBeerResponse, error) {
	out := new(UpdateBeerResponse)
	err := c.cc.Invoke(ctx, Catalog_UpdateBeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error) {
	out := new(DeleteBeerResponse)
	err := c.cc.Invoke(ctx, Catalog_DeleteBeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) SetFavorite(ctx context.Context, in *SetFavoriteRequest, opts ...grpc.CallOption) (*SetFavoriteResponse, error) {
	out := new(SetFavoriteResponse)
	err := c.cc.Invoke(ctx, Catalog_SetFavorite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetFavorites(ctx context.Context, in *GetFavoritesRequest, opts ...grpc.CallOption) (*GetFavoritesResponse, error) {
	out := new(GetFavoritesResponse)
	err := c.cc.Invoke(ctx, Catalog_GetFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteFavorites(ctx context.Context, in *DeleteFavoriteRequest, opts ...grpc.CallOption) (*DeleteFavoriteResponse, error) {
	out := new(DeleteFavoriteResponse)
	err := c.cc.Invoke(ctx, Catalog_DeleteFavorites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	GetBeers(context.Context, *GetBeersRequest) (*GetBeersResponse, error)
	GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error)
	CreateBeer(context.Context, *CreateBeerRequest) (*CreateBeerResponse, error)
	UpdateBeer(context.Context, *UpdateBeerRequest) (*UpdateBeerResponse, error)
	DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error)
	SetFavorite(context.Context, *SetFavoriteRequest) (*SetFavoriteResponse, error)
	GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error)
	DeleteFavorites(context.Context, *DeleteFavoriteRequest) (*DeleteFavoriteResponse, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GetBeers(context.Context, *GetBeersRequest) (*GetBeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeers not implemented")
}
func (UnimplementedCatalogServer) GetBeer(context.Context, *GetBeerRequest) (*GetBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}
func (UnimplementedCatalogServer) CreateBeer(context.Context, *CreateBeerRequest) (*CreateBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (UnimplementedCatalogServer) UpdateBeer(context.Context, *UpdateBeerRequest) (*UpdateBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeer not implemented")
}
func (UnimplementedCatalogServer) DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (UnimplementedCatalogServer) SetFavorite(context.Context, *SetFavoriteRequest) (*SetFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFavorite not implemented")
}
func (UnimplementedCatalogServer) GetFavorites(context.Context, *GetFavoritesRequest) (*GetFavoritesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFavorites not implemented")
}
func (UnimplementedCatalogServer) DeleteFavorites(context.Context, *DeleteFavoriteRequest) (*DeleteFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFavorites not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GetBeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBeers(ctx, req.(*GetBeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetBeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetBeer(ctx, req.(*GetBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_CreateBeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CreateBeer(ctx, req.(*CreateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateBeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateBeer(ctx, req.(*UpdateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_DeleteBeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteBeer(ctx, req.(*DeleteBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_SetFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).SetFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_SetFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).SetFavorite(ctx, req.(*SetFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetFavorites(ctx, req.(*GetFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_DeleteFavorites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteFavorites(ctx, req.(*DeleteFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeers",
			Handler:    _Catalog_GetBeers_Handler,
		},
		{
			MethodName: "GetBeer",
			Handler:    _Catalog_GetBeer_Handler,
		},
		{
			MethodName: "CreateBeer",
			Handler:    _Catalog_CreateBeer_Handler,
		},
		{
			MethodName: "UpdateBeer",
			Handler:    _Catalog_UpdateBeer_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _Catalog_DeleteBeer_Handler,
		},
		{
			MethodName: "SetFavorite",
			Handler:    _Catalog_SetFavorite_Handler,
		},
		{
			MethodName: "GetFavorites",
			Handler:    _Catalog_GetFavorites_Handler,
		},
		{
			MethodName: "DeleteFavorites",
			Handler:    _Catalog_DeleteFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
